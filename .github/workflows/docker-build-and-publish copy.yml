name: Build and publish image

on:
    workflow_dispatch:
        inputs:
            base_image:
                description: "The image to be used as a base for system containers"
                type: string
                required: false
            base_app_image:
                description: "The image to be used as a base for app containers"
                type: string
                required: false
            image_name:
                description: "The name of the image to build and publish"
                type: string
                required: true
            platforms:
                description: "Which platforms should this image be built for?"
                default: "linux/amd64"
                type: string
                required: false
        outputs:
            image_tag:
                description: "The highest-priority tag assigned to the built image"
                value: ${{ jobs.docker.outputs.image_tag }}

jobs:
    docker:
        environment: gow
        runs-on: ubuntu-latest

        outputs:
            image_tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

        steps:
            - name: Validate inputs
              shell: bash
              # Currently GitHub does _not_ validate that required inputs are actually given :-(
              # see: https://github.com/actions/runner/issues/1070
              run: |
                  # image name is always required
                  [[ "${{ inputs.image_name }}" ]] || {
                    echo "image_name input is empty but required"
                    exit 1
                  }

                  # base image name is required unless building the base image itself
                  [[ "${{ inputs.image_name }}" = "base" ]] ||
                   [[ "${{ inputs.base_image }}" ]] || {
                    echo "base_image input is empty but required"
                    exit 1
                   }

                  # base_app_image is required unless building base or base-app
                  [[ "${{ inputs.image_name }}" = "base" ]] ||
                   [[ "${{ inputs.image_name }}" = "base-app" ]] ||
                   [[ "${{ inputs.base_image }}" ]] || {
                    echo "base_app_image input is empty but required"
                    exit 1
                   }

            - name: Checkout
              uses: actions/checkout@v4

            # Set derived configuration variables:
            # - images: images to build (docker and/or github)
            # - push: if images need to be uploaded to repository (when secrets available)
            # - has_docker_token
            # - has_github_token
            # - cache_from: image tag to use for imported cache
            # - cache_to: image tag to use for exported cache
            # - github_server_url: reference to source code repository
            - name: Prepare
              id: prep
              run: |
                  IMAGES=""
                  PUSH=false

                  if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
                    IMAGES="gameonwhales/${{ inputs.image_name }}"
                    PUSH=true
                    echo "has_docker_token=true" >> $GITHUB_OUTPUT
                  fi

                  if [ -n "${{ secrets.GHCR_TOKEN }}" ]; then
                    REGISTRY_IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}"
                    if [ "$IMAGES" = "" ]; then
                      IMAGES="ghcr.io/${REGISTRY_IMAGE}"
                    else
                      IMAGES="$IMAGES,ghcr.io/${REGISTRY_IMAGE}"
                    fi
                    PUSH=true
                    echo "has_github_token=true" >> $GITHUB_OUTPUT
                    echo "cache_from=type=registry,ref=${REGISTRY_IMAGE}:buildcache"  >> $GITHUB_OUTPUT
                    echo "cache_to=type=registry,ref=${REGISTRY_IMAGE}:buildcache,mode=max"  >> $GITHUB_OUTPUT
                  else
                    echo "cache_from=type=registry,ref=${REGISTRY_IMAGE}:buildcache"  >> $GITHUB_OUTPUT
                    echo "cache_to="  >> $GITHUB_OUTPUT
                  fi

                  echo "images=${IMAGES}"  >> $GITHUB_OUTPUT
                  echo "push=${PUSH}"  >> $GITHUB_OUTPUT
                  echo "github_server_url=${GITHUB_SERVER_URL}"  >> $GITHUB_OUTPUT

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v5
              with:
                  # list of Docker images to use as base name for tags
                  images: ${{ steps.prep.outputs.images }}
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}
                      type=edge,branch=master
                      type=ref,event=branch
                      type=sha
                  flavor: latest=auto #latest will point to last semver version (stable)

            # Prepare for multi-arch
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: all

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
              with:
                  install: true
                  version: latest
                  driver-opts: image=moby/buildkit:master

            - name: Login to DockerHub
              if: steps.prep.outputs.has_docker_token != '' # secrets not available in PRs
              uses: docker/login-action@v3
              with:
                  username: ybarg
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to GitHub Container Registry
              if: steps.prep.outputs.has_github_token != '' # secrets not available in PRs
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GHCR_TOKEN }}

            - name: Build and Push
              id: docker_build
              uses: docker/build-push-action@v6
              with:
                  builder: ${{ steps.buildx.outputs.name }}
                  context: ./images/${{ inputs.image_name }}
                  file: ./images/${{ inputs.image_name }}/Dockerfile
                  platforms: ${{ inputs.platforms }}
                  push: ${{ steps.prep.outputs.push }}
                  tags: ${{ steps.meta.outputs.tags }}
                  build-args: |
                      IMAGE_SOURCE=${{ steps.prep.outputs.github_server_url }}/${{ github.repository }}
                      BASE_IMAGE=${{ inputs.base_image }}
                      BASE_APP_IMAGE=${{ inputs.base_app_image }}
                  cache-from: ${{ steps.prep.outputs.cache_from }}
                  cache-to: ${{ steps.prep.outputs.cache_to }}

            - name: Image digest
              run: echo "${{ inputs.image_name }} > ${{ steps.docker_build.outputs.digest }}"
